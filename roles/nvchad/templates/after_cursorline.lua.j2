-- Force cursorline/number highlight after all plugins/themes load
vim.opt.number = true
vim.opt.relativenumber = false
vim.opt.cursorline = true
vim.opt.cursorcolumn = false
vim.opt.cursorlineopt = "line"

-- Dark green, "transparent-like" horizontal line highlight and bright green line number
vim.api.nvim_set_hl(0, "CursorLine", { bg = "#103E16" })
vim.api.nvim_set_hl(0, "CursorLineNr", { fg = "#00FF5F", bold = true })

-- Force-disable any vertical guides/columns set by themes/plugins
vim.opt.colorcolumn = ""
vim.api.nvim_set_hl(0, "ColorColumn", { bg = "NONE" })
vim.api.nvim_set_hl(0, "CursorColumn", { bg = "NONE" })

vim.api.nvim_create_autocmd({"VimEnter","WinEnter","BufWinEnter"}, {
  callback = function()
    vim.wo.colorcolumn = ""
    -- Re-apply highlights in case a colorscheme changed them
    vim.api.nvim_set_hl(0, "CursorLine", { bg = "#103E16" })
    vim.api.nvim_set_hl(0, "CursorLineNr", { fg = "#00FF5F", bold = true })
    -- Ensure window uses CursorLine mapping
    local whl = vim.wo.winhighlight
    if not whl or whl == "" then
      vim.wo.winhighlight = "CursorLine:CursorLine"
    elseif not whl:match("CursorLine:") then
      vim.wo.winhighlight = whl .. ",CursorLine:CursorLine"
    end
  end,
})

-- Enforce 85 char auto-wrap on insert across filetypes after all configs
local function enforce_wrap_85()
  vim.opt_local.wrap = true
  vim.opt_local.textwidth = 85
  local fo = vim.api.nvim_get_option_value('formatoptions', { scope = 'local' })
  fo = fo:gsub('l','')
  if not fo:match('t') then fo = fo .. 't' end
  vim.api.nvim_set_option_value('formatoptions', fo, { scope = 'local' })
end

-- Run once now
pcall(enforce_wrap_85)

-- Re-run on typical events and after NVChad's VeryLazy
vim.api.nvim_create_autocmd({"BufEnter","InsertEnter","BufWinEnter","FileType","WinEnter"}, {
  callback = enforce_wrap_85,
})
vim.api.nvim_create_autocmd("User", {
  pattern = "VeryLazy",
  callback = enforce_wrap_85,
})

-- Enforce spell and completion UI post-load
local function enforce_completion_spell()
  vim.opt.spell = true
  vim.opt.spelllang = "en_us"
  -- Enforce completeopt globally and locally (some configs clear it)
  vim.o.completeopt = "menu,menuone,noselect"
  vim.opt_local.completeopt = "menu,menuone,noselect"
end

pcall(enforce_completion_spell)

vim.api.nvim_create_autocmd({"BufEnter","InsertEnter","BufWinEnter","FileType","WinEnter"}, {
  callback = enforce_completion_spell,
})
vim.api.nvim_create_autocmd("User", {
  pattern = "VeryLazy",
  callback = enforce_completion_spell,
})


