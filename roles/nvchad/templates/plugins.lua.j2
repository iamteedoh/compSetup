-- Ensure tree and treesitter are present (NVChad includes these by default, but we pin/ensure)
return {
  { "nvim-tree/nvim-tree.lua", lazy = false, config = function()
      require("nvim-tree").setup{}
    end },
  { "nvim-treesitter/nvim-treesitter", build = ":TSUpdate" },
  -- NERDTree (optional, classic tree)
  { "preservim/nerdtree", lazy = true, cmd = { "NERDTree", "NERDTreeToggle" } },
  -- Treesitter grammars you commonly use
  {
    "nvim-treesitter/nvim-treesitter",
    opts = {
      ensure_installed = {
        "lua","vim","vimdoc","bash","python","yaml","json","markdown","markdown_inline","go","rust","javascript","typescript"
      },
      highlight = { enable = true },
      indent = { enable = true },
    },
  },

  -- Ensure nvim-cmp is enabled with buffer+path sources and Ctrl-Space to trigger
  {
    "hrsh7th/nvim-cmp",
    opts = function(_, opts)
      local cmp = require("cmp")
      local types = require("cmp.types")
      opts = opts or {}
      opts.completion = vim.tbl_deep_extend("force", opts.completion or {}, {
        keyword_length = 1,
        completeopt = "menu,menuone,noselect",
        autocomplete = { types.cmp.TriggerEvent.TextChanged },
      })
      opts.mapping = cmp.mapping.preset.insert({
        ["<C-Space>"] = cmp.mapping.complete(),
        ["<CR>"] = cmp.mapping.confirm({ select = true }),
        ["<C-n>"] = cmp.mapping.select_next_item(),
        ["<C-p>"] = cmp.mapping.select_prev_item(),
      })
      opts.sources = cmp.config.sources({
        { name = "nvim_lsp" },
        { name = "path" },
        { name = "buffer" },
        { name = "spell" },
      })

      -- Ensure markdown/text use spell + buffer prominently
      cmp.setup.filetype({ "markdown", "text" }, {
        sources = cmp.config.sources({
          { name = "spell" },
          { name = "buffer" },
          { name = "path" },
        })
      })
      return opts
    end,
  },

  -- Completion sources (ensure present)
  { "hrsh7th/cmp-nvim-lsp" },
  { "hrsh7th/cmp-buffer" },
  { "hrsh7th/cmp-path" },
  { "f3fora/cmp-spell" },

  -- LSP config + Mason to install language servers automatically
  { "neovim/nvim-lspconfig" },
  { "williamboman/mason.nvim", build = ":MasonUpdate" },
  { "williamboman/mason-lspconfig.nvim" },

  -- Apply our basic LSP setups
  {
    "neovim/nvim-lspconfig",
    config = function()
      -- Ensure mason + mason-lspconfig are set up then apply lsp configs
      pcall(require, "mason").setup
      pcall(require, "mason-lspconfig").setup, {}
      pcall(function() require("custom.lsp") end)
    end,
  },
}


