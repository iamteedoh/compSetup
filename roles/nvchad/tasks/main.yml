---
# Role: nvchad
# Installs Neovim (via Homebrew), NVChad, and applies user config overrides.

- name: Ensure Neovim is installed
  ansible.builtin.command: brew install neovim
  register: nvim_install
  changed_when: "'Installing' in (nvim_install.stdout | default('')) or nvim_install.rc == 0"
  failed_when: false

- name: Gather $HOME
  ansible.builtin.setup:
    gather_subset:
      - env

- name: Ensure Neovim config directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/nvim"
    state: directory
    mode: "0755"

- name: Check if NVChad is already installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/nvim/init.lua"
  register: nvim_init

- name: Clone NVChad (if not present)
  ansible.builtin.git:
    repo: https://github.com/NvChad/NvChad
    dest: "{{ ansible_env.HOME }}/.config/nvim"
    version: v2.5
    update: no
  when: not nvim_init.stat.exists

- name: Ensure NVChad custom config directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/nvim/lua/custom"
    state: directory
    mode: "0755"

- name: Deploy NVChad custom config (options.lua)
  ansible.builtin.template:
    src: init.lua.j2
    dest: "{{ ansible_env.HOME }}/.config/nvim/lua/custom/init.lua"
    mode: "0644"

- name: Deploy NVChad custom config (chadrc.lua)
  ansible.builtin.template:
    src: chadrc.lua.j2
    dest: "{{ ansible_env.HOME }}/.config/nvim/lua/custom/chadrc.lua"
    mode: "0644"

- name: Deploy NVChad custom plugins (plugins.lua)
  ansible.builtin.template:
    src: plugins.lua.j2
    dest: "{{ ansible_env.HOME }}/.config/nvim/lua/custom/plugins.lua"
    mode: "0644"

- name: Deploy NVChad custom mappings (mappings.lua)
  ansible.builtin.template:
    src: mappings.lua.j2
    dest: "{{ ansible_env.HOME }}/.config/nvim/lua/custom/mappings.lua"
    mode: "0644"

- name: Ensure NVChad plugins are installed (Lazy sync)
  ansible.builtin.shell: |
    set -euo pipefail
    nvim --headless "+Lazy! sync" +qa
  args:
    executable: /bin/bash
  environment:
    PATH: "/opt/homebrew/bin:/opt/homebrew/sbin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false

- name: Ensure Treesitter parsers are up to date
  ansible.builtin.shell: |
    set -euo pipefail
    nvim --headless "+TSUpdateSync" +qa
  args:
    executable: /bin/bash
  environment:
    PATH: "/opt/homebrew/bin:/opt/homebrew/sbin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false


