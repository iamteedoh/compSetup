---
- name: Remove Snap Neovim if present
  become: true
  ansible.builtin.command: "snap remove --purge nvim"
  register: snap_remove_nvim
  changed_when: snap_remove_nvim.rc == 0
  failed_when: false
  when:
    - ansible_system == 'Linux'
    - ('/snap/bin' in ansible_env.PATH)

- name: Add Neovim PPA on Ubuntu/Pop!_OS
  become: true
  ansible.builtin.apt_repository:
    repo: ppa:neovim-ppa/unstable
    state: present
  register: neovim_ppa_repo
  when:
    - ansible_system == 'Linux'
    - (detected_distribution | default(ansible_distribution | lower | regex_replace('[^a-z0-9_]+', '_'))) in ['ubuntu', 'pop_os']

- name: Update apt cache if Neovim PPA changed
  become: true
  ansible.builtin.apt:
    update_cache: true
  when:
    - neovim_ppa_repo is defined
    - neovim_ppa_repo.changed

- name: Normalize apt package list
  set_fact:
    apt_packages_resolved: "{{ apt_packages_resolved | default([]) | unique }}"

- name: Filter apt packages by repository availability
  when: apt_packages_resolved | length > 0
  block:
    - name: Check apt package availability
      ansible.builtin.shell: |
        set -euo pipefail
        if apt-cache show "{{ item }}" >/dev/null 2>&1; then
          printf '%s' "{{ item }}"
        fi
      args:
        executable: /bin/bash
      loop: "{{ apt_packages_resolved }}"
      register: apt_package_checks
      changed_when: false
      failed_when: false

    - name: Gather available apt packages
      set_fact:
        apt_packages_available: "{{ apt_package_checks.results
          | map(attribute='stdout')
          | reject('equalto', '')
          | list
          | unique }}"

    - name: Warn about missing apt packages
      ansible.builtin.debug:
        msg: >-
          Skipping packages not found in APT repositories: {{ apt_packages_resolved | difference(apt_packages_available | default([])) }}
      when: (apt_packages_resolved | difference(apt_packages_available | default([]))) | length > 0
      changed_when: false

- name: Install apt packages
  become: true
  ansible.builtin.apt:
    name: "{{ apt_packages_available | default([]) }}"
    state: present
    update_cache: true
  when:
    - apt_packages_available is defined
    - apt_packages_available | length > 0

- name: Compute Linux GUI package names
  set_fact:
    signal_linux_packages: >-
      {{ package_manifest.gui_apps | default([])
         | selectattr('linux', 'defined')
         | selectattr('linux.package', 'defined')
         | map(attribute='linux.package')
         | list }}
  when: ansible_system == 'Linux'

- name: Configure Signal Desktop repository
  when:
    - ansible_system == 'Linux'
    - signal_linux_packages | select('equalto', 'signal-desktop') | list | length > 0
  block:
    - name: Ensure signal keyring directory exists
      become: true
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: "0755"

    - name: Download Signal signing key
      ansible.builtin.get_url:
        url: https://updates.signal.org/desktop/apt/keys.asc
        dest: /tmp/signal-desktop-keys.asc
        mode: "0644"

    - name: Install Signal signing key
      become: true
      ansible.builtin.command: gpg --dearmor --output /usr/share/keyrings/signal-desktop-keyring.gpg /tmp/signal-desktop-keys.asc
      args:
        creates: /usr/share/keyrings/signal-desktop-keyring.gpg

    - name: Remove temporary Signal key
      ansible.builtin.file:
        path: /tmp/signal-desktop-keys.asc
        state: absent

    - name: Add Signal Desktop sources list
      become: true
      ansible.builtin.get_url:
        url: https://updates.signal.org/static/desktop/apt/signal-desktop.sources
        dest: /etc/apt/sources.list.d/signal-desktop.sources
        mode: "0644"

    - name: Refresh apt cache after adding Signal repo
      become: true
      ansible.builtin.apt:
        update_cache: true
      changed_when: false

- name: Install Nerd Fonts on Linux
  when:
    - ansible_system == 'Linux'
    - package_manifest.fonts | default([]) | length > 0
  vars:
    linux_fonts: >-
      {{ package_manifest.fonts | selectattr('linux', 'defined') | list }}
  block:
    - name: Initialize font cache refresh flag
      ansible.builtin.set_fact:
        font_cache_refresh_required: false

    - name: Process Nerd Fonts
      ansible.builtin.include_tasks: install_font.yml
      loop: "{{ linux_fonts }}"
      loop_control:
        loop_var: font_item
        label: "{{ font_item.name }}"

    - name: Rebuild font cache if fonts changed
      ansible.builtin.command: fc-cache -f
      when: font_cache_refresh_required | default(false)
      changed_when: true

- name: Install Linux GUI applications
  ansible.builtin.include_tasks: install_gui_app.yml
  loop: "{{ package_manifest.gui_apps | default([]) | selectattr('linux', 'defined') | list }}"
  loop_control:
    loop_var: gui_app
    label: "{{ gui_app.name }}"

- name: Configure Flatpak (if required)
  when: ansible_system == 'Linux'
  block:
    - name: Add Flatpak Flathub remote
      become: true
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
        method: system

    - name: Install Flatpak applications
      ansible.builtin.include_tasks: install_flatpak_app.yml
      loop: "{{ package_manifest.flatpak_apps | default([]) }}"
      loop_control:
        loop_var: flatpak_app
        label: "{{ flatpak_app }}"

- name: Install Linux CLI extras
  when:
    - ansible_system == 'Linux'
  block:
    - name: Collect gem-based CLI tools
      set_fact:
        linux_gem_tools: >-
          {{ package_manifest.cli_tools | default([])
             | selectattr('linux', 'defined')
             | selectattr('linux.type', 'defined')
             | selectattr('linux.type', 'equalto', 'gem')
             | list }}

    - name: Install CLI tool via gem
      become: true
      community.general.gem:
        name: "{{ item.linux.package }}"
        state: present
      loop: "{{ linux_gem_tools }}"
      loop_control:
        label: "{{ item.linux.package }}"
      when: linux_gem_tools | length > 0

    - name: Determine gem executable directory
      command: ruby -e 'require "rubygems"; print Gem.bindir'
      register: gem_bindir
      changed_when: false
      when: linux_gem_tools | length > 0

    - name: Stat gem binaries
      ansible.builtin.stat:
        path: "{{ gem_bindir.stdout }}/{{ item.linux.package }}"
      loop: "{{ linux_gem_tools }}"
      loop_control:
        label: "{{ item.linux.package }}"
      register: gem_binary_stats
      when:
        - linux_gem_tools | length > 0
        - gem_bindir.stdout is defined
        - gem_bindir.stdout != ''

    - name: Ensure gem binaries are on PATH
      become: true
      ansible.builtin.file:
        src: "{{ item.stat.path }}"
        dest: "/usr/local/bin/{{ item.item.linux.executable | default(item.item.linux.package) }}"
        state: link
        force: true
      loop: "{{ gem_binary_stats.results | default([]) }}"
      loop_control:
        label: "{{ item.item.linux.package }}"
      when:
        - item.stat.exists | default(false)
        - item.stat.isreg | default(false)

    - name: Ensure PATH includes gem bindir
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        marker: "# {mark} gem path"
        block: |
          export PATH={{ gem_bindir.stdout | default('/usr/local/bin') }}:$PATH
      when:
        - gem_bindir.stdout is defined
        - gem_bindir.stdout != ''

- name: Upgrade Neovim to latest available version
  become: true
  ansible.builtin.apt:
    name: neovim
    state: latest
  when:
    - ansible_system == 'Linux'

