---
- name: Remove Snap Neovim if present
  become: true
  ansible.builtin.command: "snap remove --purge nvim"
  register: snap_remove_nvim
  changed_when: snap_remove_nvim.rc == 0
  failed_when: false
  when:
    - ansible_system == 'Linux'
    - ('/snap/bin' in ansible_env.PATH)

- name: Add Neovim PPA on Ubuntu/Pop!_OS
  become: true
  ansible.builtin.apt_repository:
    repo: ppa:neovim-ppa/unstable
    state: present
  register: neovim_ppa_repo
  when:
    - ansible_system == 'Linux'
    - (detected_distribution | default(ansible_distribution | lower | regex_replace('[^a-z0-9_]+', '_'))) in ['ubuntu', 'pop_os']

- name: Update apt cache if Neovim PPA changed
  become: true
  ansible.builtin.apt:
    update_cache: true
  when:
    - neovim_ppa_repo is defined
    - neovim_ppa_repo.changed

- name: Normalize apt package list
  set_fact:
    apt_packages_resolved: "{{ apt_packages_resolved | default([]) | unique }}"

- name: Filter apt packages by repository availability
  when: apt_packages_resolved | length > 0
  block:
    - name: Check apt package availability
      ansible.builtin.shell: |
        set -euo pipefail
        if apt-cache show "{{ item }}" >/dev/null 2>&1; then
          printf '%s' "{{ item }}"
        fi
      args:
        executable: /bin/bash
      loop: "{{ apt_packages_resolved }}"
      register: apt_package_checks
      changed_when: false
      failed_when: false

    - name: Gather available apt packages
      set_fact:
        apt_packages_available: "{{ apt_package_checks.results
          | map(attribute='stdout')
          | reject('equalto', '')
          | list
          | unique }}"

    - name: Warn about missing apt packages
      ansible.builtin.debug:
        msg: >-
          Skipping packages not found in APT repositories: {{ apt_packages_resolved | difference(apt_packages_available | default([])) }}
      when: (apt_packages_resolved | difference(apt_packages_available | default([]))) | length > 0
      changed_when: false

- name: Install apt packages
  become: true
  ansible.builtin.apt:
    name: "{{ apt_packages_available | default([]) }}"
    state: present
    update_cache: true
  when:
    - apt_packages_available is defined
    - apt_packages_available | length > 0

- name: Install Nerd Fonts on Linux
  when:
    - ansible_system == 'Linux'
    - package_manifest.fonts | default([]) | length > 0
  vars:
    linux_fonts: >-
      {{ package_manifest.fonts | selectattr('linux', 'defined') | list }}
  block:
    - name: Initialize font cache refresh flag
      ansible.builtin.set_fact:
        font_cache_refresh_required: false

    - name: Process Nerd Fonts
      ansible.builtin.include_tasks: install_font.yml
      loop: "{{ linux_fonts }}"
      loop_control:
        loop_var: font_item
        label: "{{ font_item.name }}"

    - name: Rebuild font cache if fonts changed
      ansible.builtin.command: fc-cache -f
      when: font_cache_refresh_required | default(false)
      changed_when: true

- name: Upgrade Neovim to latest available version
  become: true
  ansible.builtin.apt:
    name: neovim
    state: latest
  when:
    - ansible_system == 'Linux'

