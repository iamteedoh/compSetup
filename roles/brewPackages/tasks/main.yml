---
# roles/brewPackages/tasks/main.yml
# Smart Homebrew installer for macOS on Apple Silicon
# - ARM first for taps/casks/formulae
# - Intel (Rosetta + /usr/local/bin/brew) fallback only for failed items
# - Robust VS Code extensions handling
# - Safe guards for all debug/audit tasks

#########################################################
# 0) Load desired package lists from repo root
#########################################################
- name: Load brew package lists
  include_vars:
    file: "{{ playbook_dir }}/brewPackages.yml"

# Expected keys in brewPackages.yml (all optional):
# brew_taps:     [homebrew/cask, ...]
# brew_casks:    [iterm2, docker, ...]
# brew_formulae: [git, minikube, kubectl, ...]
# vscode_extensions: [ms-python.python, redhat.vscode-yaml, ...]

#########################################################
# 1) Common paths, helpers, and sane PATH for interactive shells
#########################################################
- name: Define Homebrew paths and helpers
  set_fact:
    arm_brew_bin: /opt/homebrew/bin/brew
    intel_brew_bin: /usr/local/bin/brew
    arch_arm: /usr/bin/arch -arm64
    arch_x86: /usr/bin/arch -x86_64
    brew_env:
      PATH: "/opt/homebrew/bin:/opt/homebrew/sbin:{{ ansible_env.PATH }}"

- name: Check if Intel Homebrew exists
  stat:
    path: "{{ intel_brew_bin }}"
  register: intel_brew

- name: Ensure ARM Homebrew precedes Intel Homebrew in PATH for zsh
  when: ansible_system == "Darwin"
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    regexp: '^export PATH=.*opt/homebrew/bin'
    line: 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"'
    create: yes

#########################################################
# 2) TAPS (ARM first, Intel fallback)
#########################################################
- name: Add taps via ARM brew
  when: (brew_taps | default([])) | length > 0
  command: "{{ arch_arm }} {{ arm_brew_bin }} tap {{ item }}"
  environment: "{{ brew_env }}"
  loop: "{{ brew_taps | default([]) }}"
  register: tap_arm
  changed_when: "'Tapped' in (tap_arm.stdout | default(''))"
  failed_when: false

- name: Fallback taps to Intel brew (only those that failed on ARM)
  when:
    - (brew_taps | default([])) | length > 0
  block:
    - name: Determine taps needing Intel
      set_fact:
        taps_needing_intel: "{{ (tap_arm.results | default([])) | selectattr('rc','ne',0) | map(attribute='item') | list }}"
    - name: Ensure Rosetta is present (on-demand)
      when: (taps_needing_intel | default([])) | length > 0
      command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
      register: rosetta_taps
      changed_when: "'Install' in (rosetta_taps.stdout | default(''))"
      failed_when: false
    - name: Tap via Intel brew (fallback)
      when:
        - (taps_needing_intel | default([])) | length > 0
        - intel_brew.stat.exists | default(false)
      command: "{{ arch_x86 }} {{ intel_brew_bin }} tap {{ item }}"
      loop: "{{ taps_needing_intel | default([]) }}"
      register: tap_intel
      changed_when: "'Tapped' in (tap_intel.stdout | default(''))"
      failed_when: false

#########################################################
# 3) CASKS (ARM first, Intel fallback)
#########################################################
- name: Install casks via ARM brew (idempotent)
  when: (brew_casks | default([])) | length > 0
  block:
    - name: Detect pre-existing app bundles for requested casks
      shell: |
        set -euo pipefail
        pattern="{{ item | replace('-', ' ') | lower }}"
        pattern2="$(printf '%s' "$pattern" | sed -E 's/[0-9]+$//')"
        found=""
        for dir in /Applications ~/Applications; do
          if [ -d "$dir" ]; then
            while IFS= read -r app; do
              name="${app##*/}"
              base="${name%.app}"
              lower="$(printf '%s' "$base" | tr '[:upper:]' '[:lower:]')"
              case "$lower" in
                *$pattern*|*$pattern2*) echo "$app"; exit 0;;
              esac
            done < <(ls -1 "$dir"/*.app 2>/dev/null || true)
          fi
        done
      args:
        executable: /bin/bash
      environment: "{{ brew_env }}"
      loop: "{{ brew_casks | default([]) }}"
      register: app_probe
      changed_when: false
      failed_when: false

    - name: Compute casks to install (filter out pre-existing apps)
      set_fact:
        casks_filtered: >-
          {{ (brew_casks | default([])) | difference(
               (app_probe.results | default([])) | selectattr('stdout','!=','') | map(attribute='item') | list
             ) }}

    - name: Install casks via ARM brew (module)
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
      environment: "{{ brew_env }}"
      loop: "{{ casks_filtered | default([]) }}"
      register: cask_arm
      failed_when: false
      changed_when: false
  rescue:
    - debug:
        msg: "ARM cask install encountered errors; proceeding to Intel fallback where applicable."


- name: Fallback casks to Intel brew (only those that failed on ARM)
  when: (brew_casks | default([])) | length > 0
  block:
    - name: Determine casks needing Intel
      set_fact:
        casks_needing_intel: >-
          {{ (cask_arm.results | default([]))
             | selectattr('rc','defined')
             | selectattr('rc','ne', 0)
             | map(attribute='item') | list }}
    - name: Ensure Rosetta is present (on-demand)
      when: (casks_needing_intel | default([])) | length > 0
      command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
      register: rosetta_cask
      changed_when: "'Install' in (rosetta_cask.stdout | default(''))"
      failed_when: false
    - name: Install casks via Intel brew (fallback)
      when:
        - (casks_needing_intel | default([])) | length > 0
        - intel_brew.stat.exists | default(false)
      command: "{{ arch_x86 }} {{ intel_brew_bin }} install --cask {{ item }}"
      loop: "{{ casks_needing_intel | default([]) }}"
      register: cask_intel
      changed_when: >
        'Purging' in (cask_intel.stdout | default('')) or
        'Installing' in (cask_intel.stdout | default('')) or
        'Linking' in (cask_intel.stdout | default(''))
      failed_when: false

#########################################################
# 4) FORMULAE (ARM first, Intel fallback)
#########################################################

- name: Get installed ARM cask names for duplicate detection
  command: "{{ arch_arm }} {{ arm_brew_bin }} list --cask --versions"
  environment: "{{ brew_env }}"
  changed_when: false
  failed_when: false
  register: cask_dupe_list

- name: Get installed ARM formula names for duplicate detection
  command: "{{ arch_arm }} {{ arm_brew_bin }} list --formula --versions"
  environment: "{{ brew_env }}"
  changed_when: false
  failed_when: false
  register: formula_dupe_list

- name: Compute cask names
  set_fact:
    cask_names: "{{ (cask_dupe_list.stdout_lines | default([])) | map('regex_replace', ' .*$','') | list }}"

- name: Compute formula names
  set_fact:
    formula_names: "{{ (formula_dupe_list.stdout_lines | default([])) | map('regex_replace', ' .*$','') | list }}"

- name: Compute cask-formula duplicates
  set_fact:
    cask_formula_duplicates: "{{ (cask_names | default([])) | intersect(formula_names | default([])) | list }}"

- name: Uninstall duplicate formulae that also have casks
  when: (cask_formula_duplicates | default([])) | length > 0
  command: "{{ arch_arm }} {{ arm_brew_bin }} uninstall --formula {{ item }}"
  loop: "{{ cask_formula_duplicates | default([]) }}"
  register: uninstall_dupe_formulas
  changed_when: "uninstall_dupe_formulas.rc == 0"
  failed_when: false

- name: Get installed ARM formula list
  command: "{{ arch_arm }} {{ arm_brew_bin }} list --formula --versions"
  environment: "{{ brew_env }}"
  changed_when: false
  failed_when: false
  register: arm_list

- name: Compute pending formulae (not yet present in ARM list)
  when: (brew_formulae | default([])) | length > 0
  set_fact:
    formulae_pending: >-
      {{
        (brew_formulae | default([])) | difference(
          (arm_list.stdout_lines | default([])) | map('regex_replace', ' .*$','') | list
        )
      }}

- name: Install formulae via ARM brew
  when: (formulae_pending | default([])) | length > 0
  command: "{{ arch_arm }} {{ arm_brew_bin }} install {{ item }}"
  environment: "{{ brew_env }}"
  loop: "{{ formulae_pending | default([]) }}"
  register: arm_install
  changed_when: >
    'Pouring' in (arm_install.stdout | default('')) or
    'Installing' in (arm_install.stdout | default('')) or
    'Linking' in (arm_install.stdout | default(''))
  failed_when: false

- name: Determine formulae needing Intel fallback
  when: arm_install is defined
  set_fact:
    formulae_needing_intel: "{{ (arm_install.results | default([])) | selectattr('rc','ne',0) | map(attribute='item') | list }}"

- name: Ensure Rosetta is present (on-demand)
  when: (formulae_needing_intel | default([])) | length > 0
  command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
  register: rosetta_form
  changed_when: "'Install' in (rosetta_form.stdout | default(''))"
  failed_when: false

- name: Install formulae via Intel brew (fallback)
  when:
    - (formulae_needing_intel | default([])) | length > 0
    - intel_brew.stat.exists | default(false)
  command: "{{ arch_x86 }} {{ intel_brew_bin }} install {{ item }}"
  loop: "{{ formulae_needing_intel | default([]) }}"
  register: intel_install
  changed_when: >
    'Pouring' in (intel_install.stdout | default('')) or
    'Installing' in (intel_install.stdout | default('')) or
    'Linking' in (intel_install.stdout | default(''))
  failed_when: false

#########################################################
# 5) Optional: auto-repair common CLIs installed as x86_64
#    (Reinstall them as arm64 when an ARM bottle exists)
#########################################################
- name: Build audit set for common CLIs
  set_fact:
    audit_bins: >-
      {{
        (brew_formulae | default([])) |
        intersect(['minikube','kubectl','helm','docker','colima','kind']) |
        unique
      }}

- name: Detect arch of selected binaries
  when: (audit_bins | default([])) | length > 0
  shell: |
    set -euo pipefail
    for b in {{ audit_bins | join(' ') }}; do
      cmd="$(command -v "$b" || true)"
      if [ -n "$cmd" ]; then
        a="$(file "$cmd" | grep -oE 'arm64|x86_64' | head -1 || true)"
        echo "$b:$a:$cmd"
      fi
    done
  environment: "{{ brew_env }}"
  register: bin_arch
  changed_when: false
  failed_when: false

- name: Compute tools that are x86_64 and need ARM reinstall
  set_fact:
    need_arm_reinstall: >-
      {{
        (bin_arch.stdout_lines | default([]))
        | map('split', ':')
        | selectattr('1', 'equalto', 'x86_64')
        | map('first')
        | list
      }}

- name: Reinstall mismatched tools as arm64
  when: (need_arm_reinstall | default([])) | length > 0
  command: "{{ arch_arm }} {{ arm_brew_bin }} reinstall {{ item }}"
  loop: "{{ need_arm_reinstall | default([]) }}"
  register: arm_reinstalls
  changed_when: "'Reinstalling' in (arm_reinstalls.stdout | default('')) or arm_reinstalls.rc == 0"
  failed_when: false

#########################################################
# 6) VS CODE EXTENSIONS (robust; no undefined vars)
#########################################################
- name: Normalize VS Code extensions list
  set_fact:
    vscode_extensions: "{{ (vscode_extensions | default([])) | list }}"
    install_vscode_extensions: "{{ install_vscode_extensions | default(false) | bool }}"

- name: Detect VS Code CLI (stable or insiders)
  shell: |
    set -euo pipefail
    for c in \
      "code" \
      "code-insiders" \
      "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" \
      "/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin/code"
    do
      if command -v "$c" >/dev/null 2>&1; then echo "$c"; exit 0; fi
      if [ -x "$c" ]; then echo "$c"; exit 0; fi
    done
    exit 1
  register: code_bin
  changed_when: false
  failed_when: false

- name: Note when VS Code is not installed or extensions disabled
  when: code_bin.rc != 0 or not install_vscode_extensions
  debug:
    msg: >-
      VS Code not found or extension install disabled (install_vscode_extensions={{ install_vscode_extensions }}).
      Skipping VS Code extensions.
  changed_when: false

- name: Read installed VS Code extensions
  when:
    - code_bin.rc == 0
    - (vscode_extensions | default([])) | length > 0
    - install_vscode_extensions
  command: "{{ code_bin.stdout }} --list-extensions"
  register: code_ext_list
  changed_when: false
  failed_when: false

- name: Compute missing VS Code extensions
  when:
    - code_bin.rc == 0
    - (vscode_extensions | default([])) | length > 0
    - install_vscode_extensions
  set_fact:
    vscode_ext_missing: >-
      {{ (vscode_extensions | default([])) | difference(code_ext_list.stdout_lines | default([])) }}

- name: Ensure vscode_ext_missing is defined
  set_fact:
    vscode_ext_missing: "{{ vscode_ext_missing | default([]) }}"

- name: Install missing VS Code extensions
  when:
    - code_bin.rc == 0
    - (vscode_ext_missing | default([])) | length > 0
    - install_vscode_extensions
  command: "{{ code_bin.stdout }} --install-extension {{ item }} --force"
  loop: "{{ vscode_ext_missing | default([]) }}"
  register: code_ext_install
  changed_when: "'Installing' in (code_ext_install.stdout | default('')) or code_ext_install.rc == 0"
  failed_when: false

#########################################################
# 7) Reporting / Debug (safe guards everywhere)
#########################################################
- name: Debug failures (ARM formula installs)
  when:
    - arm_install is defined
    - (arm_install.results | default([])) | selectattr('rc','ne',0) | list | length > 0
  debug:
    var: arm_install.results | default([]) | selectattr('rc','ne',0) | list

- name: Debug failures (Intel formula fallbacks)
  when:
    - intel_install is defined
    - (intel_install.results | default([])) | selectattr('rc','ne',0) | list | length > 0
  debug:
    var: intel_install.results | default([]) | selectattr('rc','ne',0) | list

- name: Print audit results (if any)
  when:
    - bin_arch is defined
    - (bin_arch.stdout | default('')) != ''
  debug:
    msg: "{{ bin_arch.stdout_lines | default([]) }}"

- name: VS Code extension install summary
  when:
    - code_bin is defined
    - code_bin.rc == 0
    - install_vscode_extensions
  debug:
    msg: >-
      Requested: {{ vscode_extensions | default([]) }}
      Missing before: {{ vscode_ext_missing | default([]) }}
